cmake_minimum_required(VERSION 3.14)

project(MIA VERSION 0.0.1 LANGUAGES CXX)

find_package(Argumentum CONFIG REQUIRED)
find_package(spdlog CONFIG REQUIRED)

find_package(Git REQUIRED)

execute_process(COMMAND "${GIT_EXECUTABLE}" apply ../fix_cppast_install.patch WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/cppast" ERROR_QUIET)

add_subdirectory(cppast)

add_library(utils INTERFACE)
target_sources(utils INTERFACE)
target_include_directories(utils INTERFACE 
	$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>  
    $<INSTALL_INTERFACE:include>
)

add_library(core)

target_compile_features(core PRIVATE cxx_std_17)
target_link_libraries(core PUBLIC utils cppast spdlog::spdlog spdlog::spdlog_header_only)
target_include_directories(core PRIVATE include)
target_compile_definitions(core PUBLIC MIA_VERSION="${CMAKE_PROJECT_VERSION}")

add_executable(mia Mia.cpp)

target_compile_features(mia PRIVATE cxx_std_17)
target_link_libraries(mia PRIVATE core Argumentum::argumentum)
target_include_directories(mia PRIVATE include)

add_subdirectory(src)
add_subdirectory(include)

# INSTALLS

include(CMakePackageConfigHelpers)
write_basic_package_version_file(
    "${PROJECT_BINARY_DIR}/miaConfigVersion.cmake"
    VERSION ${CMAKE_PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

configure_package_config_file(
    "${PROJECT_SOURCE_DIR}/cmake/miaConfig.cmake.in"
    "${PROJECT_BINARY_DIR}/miaConfig.cmake"
    INSTALL_DESTINATION lib/cmake/mia
)

install(TARGETS mia DESTINATION bin)
install(TARGETS utils core cppast type_safe debug_assert _cppast_tiny_process _cppast_libclang tiny-process-library EXPORT miaTargets LIBRARY DESTINATION lib PUBLIC_HEADER DESTINATION include)
# TODO: install cppast files to include/cppast
#install(FILES )
install(EXPORT miaTargets DESTINATION lib/cmake/mia NAMESPACE mia::)
install(FILES 
    "${PROJECT_BINARY_DIR}/miaConfigVersion.cmake"
    "${PROJECT_BINARY_DIR}/miaConfig.cmake"
    DESTINATION lib/cmake/mia
)